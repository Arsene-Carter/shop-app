'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};
var _redux = require('redux');
var _actionTypes = require('../actionTypes');function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}










var list = function list(state, action) {
  switch (action.type) {
    case 'ADD_SHOPPING_ITEM_SUCCESS':
      return Object.assign({}, state, {
        shoppingItems: [].concat(_toConsumableArray(state.shoppingItems), [action.response.result]) });

    case 'LOAD_SHOPPING_ITEMS_SUCCESS':
      return Object.assign({}, state, {
        shoppingItems: [].concat(_toConsumableArray(action.response.result)) });

    case 'DELETE_SHOPPING_ITEM_SUCCESS':
      return Object.assign({}, state, {
        shoppingItems: state.shoppingItems.filter(function (id) {return id !== action.itemId;}) });

    default:
      return state;}

};

var listsById = function listsById() {var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var action = arguments[1];
  switch (action.type) {
    case 'LOGOUT_REQUEST_SUCCESS':
      return {};
    case 'DELETE_LIST_REQUEST_SUCCESS':{
        var newState = _extends({}, state);
        delete newState[action.listId];
        return newState;
      }
    default:
      if (
      action.response &&
      action.response.entities &&
      action.response.entities.lists)
      {
        return _extends({}, state, action.response.entities.lists);
      }

      if (action.listId) {
        return Object.assign({}, state, _defineProperty({},
        action.listId, list(state[action.listId], action)));

      }

      return state;}

};

var reducer = (0, _redux.combineReducers)({ listsById: listsById });exports.default =
reducer;